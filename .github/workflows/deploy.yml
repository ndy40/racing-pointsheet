name: Test and Deploy

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    uses: ./.github/workflows/tests.yml

  deploy:
    needs: test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Generate version number
        id: version
        run: |
          # Generate version based on date and commit hash
          VERSION=$(date +'%Y%m%d%H%M')-${GITHUB_SHA::7}
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Create deployment package
        run: |
          # Create a directory with the version name
          mkdir -p pointsheet-$VERSION

          # Copy backend and bin folders
          cp -r backend pointsheet-$VERSION/
          cp -r bin pointsheet-$VERSION/

          # Create a version file
          echo $VERSION > pointsheet-$VERSION/VERSION

      - name: Setup environment variables
        run: |
          # Decode the base64-encoded environment variables
          echo "${{ secrets.ENV_VAR }}" | base64 -d > pointsheet-$VERSION/backend/pointsheet/.env
          # Verify the file was created
          ls -la pointsheet-$VERSION/backend/pointsheet/.env

      - name: Create zip file
        run: |
          # Create zip file excluding specified files and directories
          zip -r pointsheet-$VERSION.zip pointsheet-$VERSION \
            -x "pointsheet-$VERSION/*/docker*" \
            -x "pointsheet-$VERSION/*/docks*" \
            -x "pointsheet-$VERSION/*/node_modules*" \
            -x "pointsheet-$VERSION/*/.venv*" \
            -x "pointsheet-$VERSION/*/venv*" \
            -x "pointsheet-$VERSION/*/Dockerfile*" \
            -x "pointsheet-$VERSION/*/docker-compose.yml*"

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SERVER_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts

      - name: Upload to server
        run: |
          # Create deployment directory if it doesn't exist
          ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "mkdir -p ${{ secrets.DEPLOY_DIR }}"

          # Upload the zip file
          scp pointsheet-$VERSION.zip ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:${{ secrets.DEPLOY_DIR }}/

          # Unzip on the server
          ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "cd ${{ secrets.DEPLOY_DIR }} && unzip -q pointsheet-$VERSION.zip"

      - name: Deploy on server
        run: |
          # Run the deployment script
          ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "export DEPLOY_DIR=${{ secrets.DEPLOY_DIR }} && ${{ secrets.DEPLOY_DIR }}/pointsheet-$VERSION/bin/deploy.sh $VERSION"

      - name: Cleanup
        run: |
          rm -rf ~/.ssh/id_rsa
          rm -rf pointsheet-$VERSION
          rm -f pointsheet-$VERSION.zip
