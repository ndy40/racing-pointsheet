openapi: 3.1.0
info:
  title: Sim Racing Point Sheet API
  description: Sim Racing Point Sheet API
  version: 0.0.1
servers:
  - url: "http://pointsheet-app.com"
    description: local domain
  - url: "https://api.pointsheetracing.com"
security:
  - BearerAuth: []
paths:
  /api/auth:
    get:
      operationId: getCurrentUser
      description: Get the current logged in user based on the token
      tags:
        - Authentication
      security:
        - BearerAuth: [ ]
      responses:
        200:
          description: Current logged in user
          content:
            application/json:
              schema:
                type: object
                properties:
                  username:
                    type: string
                  role:
                    type: string
                    enum:
                      - driver
                      - admin
                required:
                  - username
                  - role
        401:
          description: Unauthorized - Invalid or expired token
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                  message:
                    type: string
                required:
                  - error
                  - message
              examples:
                invalidToken:
                  value:
                    error: "Unauthorized"
                    message: "Invalid or expired token."
    post:
      operationId: authenticateUser
      description: Authenticate a user using username and password
      tags:
        - Authentication
      security: [ ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthUserRequest"
      responses:
        200:
          description: Authentication Token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthTokenReponse"
        401:
          description: Unauthorized - Invalid username or password
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                  message:
                    type: string
                required:
                  - error
                  - message
              examples:
                invalidCredentials:
                  value:
                    error: "Unauthorized"
                    message: "Invalid username or password."
  /api/auth/register:
    post:
      operationId: registerUser
      description: Register a new user
      tags:
        - Authentication
      security: [ ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterUser"
      responses:
        204:
          description: User registered successfully
  /api/account/drivers:
    get:
      operationId: getAllDrivers
      description: Get all drivers
      tags:
        - Account
      security:
        - BearerAuth: [ ]
      responses:
        200:
          description: List of drivers
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Driver"
        401:
          description: Unauthorized - Invalid or expired token
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                  message:
                    type: string
                required:
                  - error
                  - message

  /api/series:
    get:
      description: Fetch all series
      operationId: fetchAllSeries
      tags:
        - Series
      security:
        BearerAuth: [ ]
      parameters:
        - in: query
          name: status
          schema:
            type: array
            items:
              type: string
              enum:
                - started
                - closed
                - not_started
          style: form
          explode: true
          description: Filter series by one or more status values
      responses:
        200:
          description: List of series
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ListSeries"
        401:
          description: Forbidden request
    post:
      description: Create series
      operationId: createSeries
      tags:
        - Series
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateSeriesRequest"
      responses:
        201:
          description: Created Series
          content:
            application/json:
              schema:
                $ref: "#/components/responses/ResourceCreated"
        400:
          description: Bad request
  /api/series/{series_id}:
    get:
      description: Get series
      operationId: fetchSeriesById
      parameters:
        - in: path
          name: series_id
          required: true
          schema:
            type: string
      tags:
        - Series
      responses:
        200:
          description: Series
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Series"
        404:
          description: Not found
        401:
          description: Forbidden
    patch:
      description: Update series information
      operationId: updateSeries
      parameters:
        - in: path
          name: series_id
          required: true
          schema:
            type: string
      tags:
        - Series
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateSeriesRequest"
      responses:
        200:
          description: Series updated
          content:
            application/json:
              schema:
                $ref: "#/components/responses/ResourceCreated"
        400:
          description: Bad request
        404:
          description: Series not found
    delete:
      description: Delete series
      operationId: deleteSeries
      parameters:
        - in: path
          name: series_id
          schema:
            type: string
          required: true
      tags:
        - Series
      responses:
        204:
          description: Delete series
  /api/series/{series_id}/status:
    put:
      operationId: updateSeriesStatus
      description: Update the status of Series.
      tags:
        - Series
      parameters:
        - in: path
          name: series_id
          schema:
            type: uuid
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  enum:
                    - started
                    - closed
                required: true
      responses:
        204:
          description: Status updated
        404:
          description: Not found
        401:
          description: Forbidden
  /api/series/{series_id}/events:
    get:
      description: Get all events for a series
      operationId: getSeriesEvents
      parameters:
        - in: path
          name: series_id
          required: true
          schema:
            type: uuid
      tags:
        - Series
      responses:
        200:
          description: List of events for the series
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Event"
        401:
          description: Unauthorized
    post:
      description: Create event for series
      operationId: createEventForSeries
      parameters:
        - in: path
          name: series_id
          required: true
          schema:
            type: uuid
      tags:
        - Series
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateEvent"
      responses:
        204:
          description: Event created for series
    put:
      operationId: updateSeriesEvent
      tags:
        - Series
      parameters:
        - in: path
          name: series_id
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateEvent"
      responses:
        204:
          description: Event updated
        404:
          description: Not found
  /api/series/{series_id}/cover-image:
    post:
      description: Upload cover image for a series
      operationId: uploadSeriesCoverImage
      tags:
        - Series
      parameters:
        - in: path
          name: series_id
          schema:
            type: uuid
          required: true
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - file
              properties:
                file:
                  type: string
                  format: binary
      responses:
        204:
          description: Cover image uploaded successfully
        400:
          description: Bad request
        415:
          description: Unsupported Media Type
        404:
          description: Series not found
  /api/series/{series_id}/events/{event_id}:
    delete:
      description: Remove event from series
      operationId: removeEventFromSeries
      tags:
        - Series
      parameters:
        - in: path
          name: series_id
          schema:
            type: uuid
          required: true
        - in: path
          name: event_id
          schema:
            type: uuid
          required: true
      responses:
        204:
          description: Event removed
        404:
          description: Event not found
  /api/events:
    get:
      operationId: getAllEvents
      description: Fetch all events not closed.
      tags:
        - Events
      responses:
        200:
          description: Event
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Event"
        401:
          description: Forbidden
    post:
      description: Create a new event
      operationId: createEvent
      tags:
        - Events
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateEvent"
      responses:
        201:
          description: Event successfully created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Event"
        400:
          description: Bad request

  /api/events/{id}:
    delete:
      description: Delete event
      operationId: deleteEventById
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      tags:
        - Events
      responses:
        204:
          description: Item deleted
    get:
      description: Get event
      operationId: getEventById
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      tags:
        - Events
      responses:
        200:
          description: Event
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Event"
    patch:
      description: Update event
      operationId: updateEvent
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          required: true
      tags:
        - Events
      security:
        - BearerAuth: [ ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateEvent"
      responses:
        200:
          description: Event updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/responses/ResourceUpdated"
        400:
          description: Bad request
        404:
          description: Event not found

  /api/events/{id}/schedule:
    post:
      description: Create schedule for event
      operationId: addSchedule
      tags:
        - Events
      parameters:
        - in: path
          name: id
          schema:
            type: string
      security:
        - BearerAuth: [ ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateSchedule"
      responses:
        400:
          description: Bad request
        204:
          description: Schedule created
  /api/events/{event_id}/schedule/{schedule_id}:
    delete:
      operationId: removeEventSchedule
      tags:
        - Events
      parameters:
        - name: event_id
          in: path
          schema:
            type: string
            format: uuid
          required: true
        - name: schedule_id
          in: path
          schema:
            type: integer
          required: true
      responses:
        404:
          description: Event not found
        204:
          description: Schedule deleted

  /api/events/{id}/join:
    put:
      operationId: joinEvent
      tags:
        - Events
      parameters:
        - name: id
          in: path
          schema:
            type: string
          required: true
      responses:
        204:
          description: User joined event
        400:
          description: Bad request
  /api/events/{id}/leave:
    put:
      operationId: leaveEvent
      parameters:
        - name: id
          in: path
          schema:
            type: string
          required: true
      tags:
        - Events
      responses:
        204:
          description: Removed from event

  /api/events/{id}/schedule/{schedule_id}/results/file:
    post:
      description: Upload results file for a given event
      operationId: uploadEventResults
      tags:
        - Events
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
        - in: path
          name: schedule_id
          schema:
            type: integer
          required: true
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - file
              properties:
                file:
                  type: string
                  format: binary
      responses:
        201:
          description: Results file uploaded successfully
        400:
          description: Bad request
        415:
          description: Unsupported Media Type
    get:
      operationId: getResults
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: "uuid"
      tags:
        - Events
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: "#/components/responses/ListOfResults"
        404:
          description: Not found
        400:
          description: Bad request
  /api/events/{id}/result:
    post:
      description: Upload results file for a given event
      operationId: addRaceResult
      tags:
        - Events
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateRaceResult"
      responses:
        201:
          description: Results file uploaded successfully
        400:
          description: Bad request
        415:
          description: Unsupported Media Type
    get:
      operationId: getResults
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: "uuid"
      tags:
        - Events
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: "#/components/responses/ListOfResults"
          description: Get event result
        404:
          description: Not found
        400:
          description: Bad request

  /api/tracks:
    get:
      operationId: getAllTracks
      description: Fetch all tracks.
      tags:
        - Tracks
      parameters:
        - in: query
          name: order_by
          schema:
            type: string
            enum:
              - id
              - name
        - in: query
          name: direction
          schema:
            type: string
            enum:
              - asc
              - desc
      responses:
        200:
          description: List of tracks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Track"
        401:
          description: Forbidden

  /api/tracks/{id}:
    get:
      description: Get track by ID
      operationId: getTrackById
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      tags:
        - Tracks
      responses:
        200:
          description: Track
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Track"
        404:
          description: Not found
        401:
          description: Forbidden

  /api/games:
    get:
      operationId: getAllGames
      description: Fetch all games.
      tags:
        - Games
      responses:
        200:
          description: List of games
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Game"
        401:
          description: Forbidden

  /api/games/{id}:
    get:
      description: Get game by ID
      operationId: getGameById
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      tags:
        - Games
      responses:
        200:
          description: Game
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Game"
        404:
          description: Not found
        401:
          description: Forbidden

  /api/games/{id}/cars:
    get:
      description: Get all cars for a specific game with pagination
      operationId: getGameCars
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          required: false
          description: Page number
        - in: query
          name: page_size
          schema:
            type: integer
            default: 20
          required: false
          description: Number of items per page
        - in: query
          name: search
          schema:
            type: string
          description: Search to search by car model
      tags:
        - Games
      responses:
        200:
          description: Paginated list of cars for the specified game
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedCarResponse"
        404:
          description: Game not found
        401:
          description: Forbidden

  /api/cars:
    get:
      operationId: getAllCars
      description: Fetch all cars with optional filtering by game.
      tags:
        - Cars
      parameters:
        - in: query
          name: game
          schema:
            type: string
          description: Filter cars by game (e.g., Forza Motorsport, ACC, iRacing)
          required: false
      responses:
        200:
          description: List of cars
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Car"
        401:
          description: Forbidden
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: token
  schemas:
    AuthUserRequest:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
    AuthTokenReponse:
      type: object
      properties:
        username:
          type: string
        auth_token:
          type: string
        auth_expired_in:
          type: datetime
    RegisterUser:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
        role:
          type: string
          enum:
            - admin
            - driver
          default: driver
        team:
          type: string
          description: Team is provided is provided when Role = admin and used to create Team during registration.
      required:
        - username
        - password

    Series:
      type: object
      required:
        - id
        - title
        - starts_at
        - ends_at
      properties:
        id:
          type: string
        title:
          type: string
        starts_at:
          type: datetime
        ends_at:
          type: datetime
        status:
          type: string
          enum:
            - open
            - started
            - closed
        cover_image:
          type: string
          description: Optional cover image for the series
        description:
          type: string
          description: Optional description of the series
        events:
          type: array
          items:
            $ref: "#/components/schemas/Event"
    ListSeries:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        starts_at:
          type: datetime
        ends_at:
          type: datetime
        status:
          type: string
          enum:
            - not_started
            - started
            - closed
        cover_image:
          type: str
          example: https://domain.com/image.jpg
        description:
          type: string
          example: "This is a description of the series"
        event_count:
          type: string
          example: 0

    CreateSeriesRequest:
      type: object
      required:
        - title
      properties:
        title:
          type: string
        description:
          type: string

    Driver:
      type: object
      required:
        - id
        - name
        - role
      properties:
        id:
          type: string
        name:
          type: string
        role:
          type: string
          enum:
            - driver
            - admin

    UpdateSeriesRequest:
      type: object
      description: Request to update series information (title, description, dates, cover image)
      properties:
        title:
          type: string
        description:
          type: string
        starts_at:
          type: datetime
          example: 2025-01-01
        ends_at:
          type: datetime
          example: 2025-01-01
        cover_image:
          type: string
          description: URL or path to the cover image
    SeriesStatus:
      type: string
      enum:
        - started
        - closed

    Event:
      description: An event may optionally belong to a series or be standalone in the case of one-off events.
      type: object
      required:
        - id
        - title
        - starts_at
        - ends_at
        - hosts
        - status
      properties:
        id:
          type: string
        title:
          type: string
        starts_at:
          type: datetime
        ends_at:
          type: datetime
        host:
          description: The person running the event.
          type: integer
        track:
          type: string
          default: TBD
        status:
          description: Default value is open. Users can register when this is open. No new signups when in progress or closed.
          type: string
          enum:
            - open
            - closed
            - in_progress
          default: open
        series:
          type: string
          description: UUID of series
        rules:
          type: string
          description: Can contain rules like number of pit stops, tire restrictions and others for this event.
        schedule:
          description: The sequence of activities making up the event. Qualification, Practice or race.
          type: array
          items:
            $ref: "#/components/schemas/Schedule"
        cars:
          description: List of cars available for this event.
          type: array
          items:
            $ref: "#/components/schemas/Car"
        max_participants:
          description: The maximum number of allowed participants to this event.
          type: integer
        current_participants:
          description: The number of drivers signed up to this race.
          type: integer
        is_multi_class:
          description: Flag to mark this event as multi-class racing event.
          type: boolean
    CreateEvent:
      type: object
      required:
        - title
        - host
        - status
        - starts_at
        - ends_at
      properties:
        title:
          type: string
        starts_at:
          type: datetime
        ends_at:
          type: datetime
        host:
          type: string
        status:
          type: string
          enum:
            - open
            - closed
            - in_progress
        rules:
          type: string
        cars:
          description: List of cars available for this event.
          type: array
          items:
            $ref: "#/components/schemas/Car"
    UpdateEvent:
      type: object
      properties:
        title:
          type: string
        starts_at:
          type: datetime
        ends_at:
          type: datetime
        host:
          type: string
        status:
          type: string
          enum:
            - open
            - closed
            - in_progress
        series:
          type: string
        rules:
          type: string
        track:
          type: integer
        max_participants:
          type: integer
          description: The maximum number of allowed participants to this event.
        cars:
          description: List of cars available for this event.
          type: array
          items:
            $ref: "#/components/schemas/Car"
        is_multi_class:
          description: Flag indicating if this event is a multi-class racing event.
          type: boolean

    Schedule:
      type: object
      required:
        - id
        - type
        - nbr_of_laps
        - duration
      properties:
        id:
          type: int
        type:
          type: string
          enum:
            - Practice
            - Qualification
            - Race
        nbr_of_laps:
          type: integer
        duration:
          description: The duration of the schedule.
          type: string
          example: 01:45

    PointDistribution:
      description: Not used yet. TBD
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        points:
          type: object
          additionalProperties:
            type: integer
            example: { "1": 10, "2": 20 }

    CreateSchedule:
      type: object
      require:
        - type
      properties:
        type:
          type: string
          enum:
            - practice
            - qualification
            - race
        nbr_of_laps:
          type: integer
        duration:
          type: string
          example: 1h 30m
    DriverResult:
      type: object
      required:
        - driver
        - driver_id
        - position
        - best_lap
        - total
        - penalties
        - fl_points
        - total_points
        - total
      properties:
        driver_id:
          type: string
          format: "uuid"
        driver:
          type: string
          example: driver 1
        position:
          type: integer
        best_lap:
          type: string
        total:
          type: string
        penalties:
          type: integer
        fl_points:
          type: integer
        points:
          type: integer
        total_points:
          type: integer
    RaceResult:
      type: object
      properties:
        schedule_id:
          type: string
        mark_down:
          type: string
        upload_file:
          type: string
        result:
          type: array
          items:
            $ref: "#/components/schemas/DriverResult"
    CreateRaceResult:
      type: object
      properties:
        schedule_id:
          type: string
        result:
          type: array
          items:
            $ref: "#/components/schemas/DriverResult"

    Game:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: integer
          description: Unique identifier for the game
        name:
          type: string
          description: Name of the game (e.g., Forza Motorsport, ACC, iRacing)

    Car:
      type: object
      required:
        - game
        - model
      properties:
        id:
          type: integer
        model:
          type: string
          description: Name of the car model
        year:
          type: integer
          description: Optional year of the car

    PaginationMetadata:
      type: object
      properties:
        total:
          type: integer
          description: Total number of items
        page:
          type: integer
          description: Current page number
        page_size:
          type: integer
          description: Number of items per page
        total_pages:
          type: integer
          description: Total number of pages
        has_next:
          type: boolean
          description: Whether there is a next page
        has_prev:
          type: boolean
          description: Whether there is a previous page

    PaginatedCarResponse:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/Car"
        pagination:
          $ref: "#/components/schemas/PaginationMetadata"

    Track:
      type: object
      required:
        - id
        - name
        - layout
        - country
        - length
      properties:
        id:
          type: integer
        name:
          type: string
          description: Name of the track
        layout:
          type: string
          description: Specific layout of the track
        country:
          type: string
          description: Country where the track is located
        length:
          type: string
          description: Length of the track in kilometers
  responses:
    ListOfResults:
      type: array
      items:
        $ref: "#/components/schemas/RaceResult"
    ResourceCreated:
      type: object
      properties:
        resource:
          type: string
          example: uuid or id
    ResourceUpdated:
      type: object
      properties:
        resource:
          type: string
          example: uuid or id
